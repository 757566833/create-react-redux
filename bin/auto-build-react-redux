#!/usr/bin/env node

'use strict';
const fs = require('fs');
const stat = fs.stat;
const path = require('path');
let execSync = require('child_process').execSync;
var inquirer = require('inquirer');


function getNodeVersion() {
    let cmd = 'node -v';
    return parseInt(execSync(cmd).toString().replace(/\S/, ''));
}
let version = getNodeVersion();
if (version) {
    if (version < 8) {
        console.log('node version must be >8');
        return;
    }
} else {
    return;
}
const cmd = process.argv[2];
const parm = process.argv[3];
try {
    fs.mkdirSync(path.resolve('src'));
} catch (error) {
    // console.log(error)
}
if (cmd == 'init' && parm && parm == '--demo') {
    let copy = function (src, dst) {
        // 读取目录中的所有文件/目录
        fs.readdir(src, function (err, paths) {
            if (err) {
                throw err;
            }

            paths.forEach(function (path) {
                let _src = src + '/' + path,
                    _dst = dst + '/' + path,
                    readable, writable;

                stat(_src, function (err, st) {
                    if (err) {
                        throw err;
                    }

                    // 判断是否为文件
                    if (st.isFile()) {
                        // 创建读取流
                        readable = fs.createReadStream(_src);
                        // 创建写入流
                        writable = fs.createWriteStream(_dst);
                        // 通过管道来传输流
                        readable.pipe(writable);
                    }
                    // 如果是目录则递归调用自身
                    else if (st.isDirectory()) {
                        exists(_src, _dst, copy);
                    }
                });
            });
        });
    };
    // 在复制目录前需要判断该目录是否存在，不存在需要先创建目录
    let exists = function (src, dst, callback) {
        fs.exists(dst, function (exists) {
            // 已存在
            if (exists) {
                callback(src, dst);
            }
            // 不存在
            else {
                fs.mkdir(dst, function () {
                    callback(src, dst);
                });
            }
        });
    };
    exists(path.resolve(__dirname, 'demobabel'), path.resolve(), copy);
    console.log('\x1B[33m%s\x1b[0m:', 'Please yarn install or npm install');
    console.log('\x1B[36m%s\x1B[0m', 'yarn install');
    console.log('\x1B[36m%s\x1B[0m', 'npm install');
    return;
}
if (cmd == 'init') {
    const packagefile = fs.readFileSync(path.resolve(__dirname, 'babel', 'package.crr'), 'utf8');
    fs.writeFileSync(path.resolve('package.json'), packagefile);
    // 静态目录
    try {
        fs.mkdirSync(path.resolve('public'));
    } catch (error) {
        // console.log(error)
    }
    try {
        fs.mkdirSync(path.resolve('public', 'fileConfig'));
    } catch (error) {
        // console.log(error)
    }
    //服务器文件
    const server = fs.readFileSync(path.resolve(__dirname, 'babel', 'server.crr'), 'utf8');
    fs.writeFileSync(path.resolve('server.js'), server);

    try {
        fs.mkdirSync(path.resolve('views'));
    } catch (error) {
        // console.log(error)
    }
    // const appEjs = fs.readFileSync(path.resolve(__dirname, 'babel', 'appEjs.crr'), 'utf8');
    // fs.writeFileSync(path.resolve('views', 'app.ejs'), appEjs);
    // const loginEjs = fs.readFileSync(path.resolve(__dirname, 'babel', 'loginEjs.crr'), 'utf8');
    // fs.writeFileSync(path.resolve('views', 'login.ejs'), loginEjs);

    //webpack
    const webpack = fs.readFileSync(path.resolve(__dirname, 'babel', 'webpack.config.crr'), 'utf8');
    fs.writeFileSync(path.resolve('webpack.config.js'), webpack);
    try {
        fs.mkdirSync(path.resolve('webpack'));
    } catch (error) {
        // console.log(error)
    }
    try {
        fs.mkdirSync(path.resolve('webpack', 'config'));
    } catch (error) {
        // console.log(error)
    }
    try {
        fs.mkdirSync(path.resolve('webpack', 'viewBabel'));
    } catch (error) {
        // console.log(error)
    }

    // webpack config
    const webpackEntrys = fs.readFileSync(path.resolve(__dirname, 'babel', 'webpackEntrys.crr'), 'utf8');
    fs.writeFileSync(path.resolve('webpack', 'config', 'entrys.js'), webpackEntrys);

    const webpackOptimization = fs.readFileSync(path.resolve(__dirname, 'babel', 'webpackOptimization.crr'), 'utf8');
    fs.writeFileSync(path.resolve('webpack', 'config', 'optimization.js'), webpackOptimization);

    const webpackPlugins = fs.readFileSync(path.resolve(__dirname, 'babel', 'webpackPlugins.crr'), 'utf8');
    fs.writeFileSync(path.resolve('webpack', 'config', 'plugins.js'), webpackPlugins);

    const webpackRules = fs.readFileSync(path.resolve(__dirname, 'babel', 'webpackRules.crr'), 'utf8');
    fs.writeFileSync(path.resolve('webpack', 'config', 'rules.js'), webpackRules);

    const viewBabel = fs.readFileSync(path.resolve(__dirname, 'babel', 'viewBabel.crr'), 'utf8');
    fs.writeFileSync(path.resolve('webpack', 'viewBabel', 'babel.ejs'), viewBabel);


    //antd主题包
    const theme = fs.readFileSync(path.resolve(__dirname, 'babel', 'theme.crr'), 'utf8');
    fs.writeFileSync(path.resolve('theme.js'), theme);

    //fetch
    try {
        fs.mkdirSync(path.resolve('fetch'));
    } catch (error) {
        // console.log(error)
    }
    const fetchfile = fs.readFileSync(path.resolve(__dirname, 'babel', 'fetch.crr'), 'utf8');
    fs.writeFileSync(path.resolve('fetch', 'fetch.jsx'), fetchfile);
    // 页面路由配置文件
    try {
        fs.mkdirSync(path.resolve('config'));
    } catch (error) {
        // console.log(error)
    }
    const routerConfig = fs.readFileSync(path.resolve(__dirname, 'babel', 'routerConfig.crr'), 'utf8');
    fs.writeFileSync(path.resolve('config', 'routerConfig.jsx'), routerConfig);


    //创建配置文件
    const app = fs.readFileSync(path.resolve(__dirname, 'babel', 'reduxapp.crr'), 'utf8');
    const login = fs.readFileSync(path.resolve(__dirname, 'babel', 'reduxlogin.crr'), 'utf8');
    const indexfile = fs.readFileSync(path.resolve(__dirname, 'babel', 'reduxindex.crr'), 'utf8');

    const appdata = fs.readFileSync(path.resolve(__dirname, 'babel', 'reduxappdata.crr'), 'utf8');
    const logindata = fs.readFileSync(path.resolve(__dirname, 'babel', 'reduxlogindata.crr'), 'utf8');
    try {
        fs.mkdirSync(path.resolve('redux-data'));
    } catch (error) {
        // console.log(error)
    }
    try {
        fs.mkdirSync(path.resolve('redux-data', 'config'));
    } catch (error) {
        // console.log(error)
    }
    try {
        fs.mkdirSync(path.resolve('redux-data', 'data'));
    } catch (error) {
        // console.log(error)
    }
    try {
        fs.mkdirSync(path.resolve('redux-data', 'data', 'app'));
    } catch (error) {
        // console.log(error)
    }
    try {
        fs.mkdirSync(path.resolve('redux-data', 'data', 'login'));
    } catch (error) {
        // console.log(error)
    }
    fs.writeFileSync(path.resolve('redux-data', 'config', 'app.js'), app);
    fs.writeFileSync(path.resolve('redux-data', 'config', 'login.js'), login);
    fs.writeFileSync(path.resolve('redux-data', 'config', 'index.js'), indexfile);

    fs.writeFileSync(path.resolve('redux-data', 'data', 'app', 'app.js'), appdata);
    fs.writeFileSync(path.resolve('redux-data', 'data', 'login', 'login.js'), logindata);

    //eslint
    try {
        fs.mkdirSync(path.resolve('src'));
    } catch (error) {
        // console.log(error)
    }
    const eslintFile = fs.readFileSync(path.resolve(__dirname, 'babel', 'eslintrc.crr'), 'utf8');
    fs.writeFileSync(path.resolve('src', '.eslintrc.js'), eslintFile);

    console.log('\x1B[33m%s\x1b[0m:', 'Please yarn install or npm install');
    console.log('\x1B[36m%s\x1B[0m', 'yarn install');
    console.log('\x1B[36m%s\x1B[0m', 'npm install');

    console.warn('\x1B[33m%s\x1B[0m', 'If you use it for the first time, you may need to open a new project and run');
    console.warn('\x1B[36m%s\x1B[0m', 'auto-build-react-redux init --demo');
    return;
}


if (!cmd) {
    inquirer
        .prompt([{
                type: 'list',
                name: 'type',
                message: 'What do you want to do?',
                choices: [
                    'build',
                    new inquirer.Separator(),
                    'create HTML',
                    new inquirer.Separator(),
                    'create HTML.Components according to redux-data',
                    'create View according to redux-data',
                    'create Component according to redux-data',
                    new inquirer.Separator(),
                    'create all according to redux-data',
                    new inquirer.Separator(),
                ]
            },
            {
                type: 'input',
                name: 'HTML_name',
                message: 'HTML name?',
                when: (answers) => {
                    return answers.type == 'create HTML';
                },
                default: () => {
                    return 'NoHTMLName';
                }
            },
            {
                type: 'list',
                name: 'HTML',
                message: 'which HTML?',
                choices: () => {
                    let entrys = fs.readdirSync(path.resolve('src', 'entry'));
                    for (let index = 0; index < entrys.length; index++) {
                        const element = entrys[index];
                        if (!element.includes('.jsx')) {
                            entrys.splice(index, 1);
                            index--
                        }
                    }
                    return entrys.map((item) => {
                        return item.replace(/\.jsx/, '');
                    });
                },
                when: (answers) => {
                    return answers.type == 'create HTML.Components according to redux-data' || answers.type == 'create View according to redux-data' || answers.type == 'create Component according to redux-data';
                }
            },
            {
                type: 'list',
                name: 'view',
                message: 'which view?',
                choices: (answers) => {
                    const file = require(path.resolve('redux-data', 'config', `${answers.HTML}.js`));
                    let json = file[answers.HTML].views;
                    let arr = [];
                    for (const key in json) {
                        if (json.hasOwnProperty(key)) {
                            arr.push(key);
                        }
                    }


                    return arr;
                },
                when: (answers) => {
                    return answers.type == 'create View according to redux-data' && answers.HTML;
                }
            },
            {
                type: 'list',
                name: 'component',
                message: 'which Component?',
                choices: (answers) => {
                    const file = require(path.resolve('redux-data', 'config', `${answers.HTML}.js`));
                    let json = file[answers.HTML].components;
                    let arr = [];
                    for (const key in json) {
                        if (json.hasOwnProperty(key)) {
                            arr.push(key);
                        }
                    }
                    return arr;
                },
                when: (answers) => {
                    return answers.type == 'create Component according to redux-data' && answers.HTML;
                }
            },
            {
                type: 'confirm',
                name: 'confirm',
                message: 'create will overwrite your program,are you sure?',
                default: false,
                when: (answers) => {
                    return (answers.type == 'create Component according to redux-data' && answers.HTML && answers.component) ||
                        (answers.type == 'create View according to redux-data' && answers.HTML && answers.view) ||
                        (answers.type == 'create HTML.Components according to redux-data' && answers.HTML) ||
                        (answers.type == 'create HTML' && answers.HTML_name) ||
                        (answers.type == 'create all according to redux-data');

                }
            },
        ])
        .then(answers => {
            switch (answers.type) {
                case 'build':
                    {
                        let json;
                        try {
                            json = require(path.resolve('redux-data', 'config', 'index.js'));
                        } catch (e) {
                            console.log('\x1B[31m%s\x1B[0m', `${e.message} in redux-data/config/index.js`);
                            return;
                        }
                        const Program = require(path.resolve(__dirname, 'create-react-redux.js'));
                        const program = new Program(json);
                        program.buildIndexRedux();
                        program.createStoreState();
                        program.createStoreStore();
                        program.createStoreReducer();
                        program.buildViewRedux();
                        program.buildComponentsRedux();
                        program.buildComponentsProgram();
                        program.buildviewProgram();
                        break;
                    }
                case 'create all according to redux-data':
                    {
                        if (!answers.confirm) {
                            return;
                        }
                        let json;
                        try {
                            json = require(path.resolve('redux-data', 'config', 'index.js'));
                        } catch (e) {
                            console.log('\x1B[31m%s\x1B[0m', `${e.message} in redux-data/config/index.js`);
                            return;
                        }
                        const Program = require(path.resolve(__dirname, 'create-react-redux.js'));
                        const program = new Program(json);
                        program.createIndex();
                        program.createModel();
                        program.buildIndexRedux();
                        program.createStoreState();
                        program.createStoreStore();
                        program.createStoreReducer();
                        program.buildViewRedux();
                        program.buildComponentsRedux();
                        program.buildComponentsProgram();
                        program.buildviewProgram();
                        program.createEntry();
                        program.buildComponentsControl();
                        program.buildViewsControl();
                        program.buildComponentsProgram_cmpt();
                        program.buildviewProgram_cmpt();
                        break;
                    }
                case 'create HTML':
                    {
                        if (!answers.confirm) {
                            return;
                        }
                        const NewFile = require(path.resolve(__dirname, 'new-react-redux.js'));

                        const newFile = new NewFile();
                        newFile.createHtml(answers.HTML_name);
                        console.log('\x1B[36m%s\x1B[0m', 'Success, update redux-data and choices \'create HTML.Components according to redux-data\'');
                        break;
                    }
                case 'create HTML.Components according to redux-data':
                    {
                        if (!answers.confirm) {
                            return;
                        }
                        const NewFile = require(path.resolve(__dirname, 'new-react-redux.js'));
                        const newFile = new NewFile();
                        const HTMLJSON = require(path.resolve('redux-data', 'config', `${answers.HTML}.js`));

                        newFile.createStoreState(HTMLJSON);
                        newFile.createStoreStore(HTMLJSON);
                        newFile.createStoreReducer(HTMLJSON);
                        newFile.buildViewRedux(HTMLJSON);
                        newFile.buildComponentsRedux(HTMLJSON);
                        newFile.buildComponentsProgram(HTMLJSON);
                        newFile.buildviewProgram(HTMLJSON);

                        newFile.buildComponentsControl(HTMLJSON);
                        newFile.buildViewsControl(HTMLJSON);
                        newFile.buildComponentsProgram_cmpt(HTMLJSON);
                        newFile.buildviewProgram_cmpt(HTMLJSON);
                        break;
                    }
                case 'create View according to redux-data':
                    {
                        if (!answers.confirm) {
                            return;
                        }
                        const NewFile = require(path.resolve(__dirname, 'new-react-redux.js'));
                        const newFile = new NewFile();
                        let json = {};
                        const HTMLJSON = require(path.resolve('redux-data', 'config', `${answers.HTML}.js`));
                        const ViewJSON = HTMLJSON[answers.HTML].views[answers.view];
                        json[answers.HTML] = {};
                        json[answers.HTML].views = {};
                        json[answers.HTML].views[answers.view] = ViewJSON;

                        const ComponentsJSON = HTMLJSON[answers.HTML].components;

                        let arr = ViewJSON.components;
                        for (let index = 0; index < arr.length; index++) {
                            const element = arr[index];
                            json[answers.HTML].components[element] = ComponentsJSON[element];
                        }


                        newFile.createStoreState(HTMLJSON);
                        newFile.createStoreStore(HTMLJSON);
                        newFile.createStoreReducer(HTMLJSON);
                        newFile.buildViewRedux(HTMLJSON);
                        newFile.buildComponentsRedux(HTMLJSON);
                        newFile.buildComponentsProgram(HTMLJSON);
                        newFile.buildviewProgram(HTMLJSON);

                        newFile.buildComponentsControl(json);
                        newFile.buildViewsControl(json);
                        newFile.buildComponentsProgram_cmpt(json);
                        newFile.buildviewProgram_cmpt(json);
                        break;
                    }
                case 'create Component according to redux-data':
                    {
                        if (!answers.confirm) {
                            return;
                        }
                        const NewFile = require(path.resolve(__dirname, 'new-react-redux.js'));
                        const newFile = new NewFile();
                        const HTMLJSON = require(path.resolve('redux-data', 'config', `${answers.HTML}.js`));

                        newFile.createStoreState(HTMLJSON);
                        newFile.createStoreStore(HTMLJSON);
                        newFile.createStoreReducer(HTMLJSON);
                        newFile.buildViewRedux(HTMLJSON);
                        newFile.buildComponentsRedux(HTMLJSON);
                        newFile.buildComponentsProgram(HTMLJSON);
                        newFile.buildviewProgram(HTMLJSON);
                        let json = {};
                        json[answers.HTML] = {};
                        json[answers.HTML].components = {};
                        json[answers.HTML].components[answers.component] = HTMLJSON[answers.HTML].components[answers.component];
                        newFile.buildComponentsControl(json);
                        newFile.buildViewsControl(json);
                        newFile.buildComponentsProgram_cmpt(json);
                        newFile.buildviewProgram_cmpt(json);
                        break;
                    }
                default:
                    break;
            }
        });
    return;
} else {
    console.log('\x1B[33m%s\x1b[0m:', 'Maybe what you want to enter is ');
    console.log('\x1B[36m%s\x1b[0m:', 'auto-build-react-redux init ');
}

// let test = require('./test');

// let t = new test;
// t.tostring();